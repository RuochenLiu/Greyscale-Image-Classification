knitr::opts_chunk$set(echo = TRUE)
img_dir <- "../data/raw_images/"
dir_names <- list.files(img_dir)
library("EBImage")
library("OpenImageR")
install.packages("OpenInamgeR")
library("EBImage")
library("OpenImageR")
install.packages("OpenImageR")
library("EBImage")
library("OpenImageR")
n_files <- length(list.files(img_dir))
### determine img dimensions
img0 <- readImage(paste0(img_dir,  dir_names[1]))
display(img0)
img1 <- readImage(paste0(img_dir,  dir_names[2]))
img2 <-  readImage(paste0(img_dir,  dir_names[3]))
h1 <- HOG(img2)
### store vectorized pixel values of images
dat <- matrix(NA, n_files,54)
for(i in 1:n_files){
img <- readImage(paste0(img_dir, dir_names[i]))
h <- HOG(img)
dat[i,] <- h
}
### output constructed features
if(export){
save(dat, file=paste0("../output/HOG.RData"))
}
library("caret")
library("gbm")
library("randomForest")
library("plyr")
library("xgboost")
library("fastAdaboost")
library("e1071")
setwd("~/GitHub/spr2017-proj3-group7")
sift_f <- read.csv("./data/sift_features.csv")
X <- t(sift_f)
labels <- read.csv("./data/labels.csv")
labels <- labels[,1]
dat_train<-X
label_train <- labels
predict_results = vector()
GBMTrain <- function(dat_train, label_train){
n <- nrow(dat_train)
r <- sample(1:n, 0.1*n)
dat_train <- dat_train[r,]
label_train <- label_train[r]
data.all <- as.data.frame(cbind(dat_train, label_train))
colnames(data.all)[ncol(data.all)] <- "Label"
data.all$Label <- as.factor(data.all$Label)
control <- trainControl(method = 'cv', number = 5)  #use 5-fold cross validation
inTrain <- createDataPartition(y = data.all$Label, p=0.75, list=FALSE)
training <- data.all[inTrain, ]
testing <- data.all[-inTrain, ]
# GBM
gbmGrid <- expand.grid(interaction.depth = (1:5) * 2,n.trees = (1:10)*25,shrinkage = .1,
n.minobsinnode = 10)
gbmfit <- train(Label~., data = training,
method = "gbm", trControl = control, verbose = FALSE,
bag.fraction = 0.5, tuneGrid = gbmGrid
) #parameter tuning
err.gbm <- sum(predict(gbmfit, testing) != testing$Label)/nrow(testing)
print(paste("gbm error is",err.gbm))
predict_results[1]=err.gbm
}
t1<-Sys.time()
GBMTrain(cbind(dat,X),labels)
t2<-Sys.time()
print(paste("GBM time is",difftime(t2,t1)))
t1<-Sys.time()
GBMTrain(dat,labels)
t2<-Sys.time()
print(paste("GBM time is",difftime(t2,t1)))
t1<-Sys.time()
GBMTrain(dat,labels)
t2<-Sys.time()
print(paste("GBM time is",difftime(t2,t1)))
